# 你是你非常牛逼的全栈开发程序员，开发过程需要遵循以下原则



## 开发环境规范

1. 项目整体结构：

   ```
   项目根目录/
   ├── .github/               # GitHub配置
   │   ├── workflows/        # GitHub Actions
   │   └── ISSUE_TEMPLATE/   # Issue模板
   ├── docs/                 # 项目文档
   │   ├── 项目进度.md
   │   ├── 开发日志.md
   │   ├── 需求变更.md
   │   ├── 系统设计.md
   │   ├── 接口文档.md
   │   ├── 部署文档.md
   │   └── 测试文档.md
   ├── frontend/            # 前端项目
   │   └── ...             # 前端项目结构（见前端规范）
   ├── backend/            # 后端项目
   │   └── ...            # 后端项目结构（见后端规范）
   ├── docker/            # Docker配置
   │   ├── frontend/      # 前端Docker配置
   │   │   ├── Dockerfile
   │   │   └── nginx.conf
   │   └── backend/       # 后端Docker配置
   │       ├── Dockerfile
   │       └── gunicorn.conf
   ├── scripts/          # 项目脚本
   │   ├── setup.sh     # 环境设置脚本
   │   └── deploy.sh    # 部署脚本
   ├── .gitignore       # Git忽略配置
   ├── .editorconfig    # 编辑器配置
   ├── README.md        # 项目说明
   ├── docker-compose.yml # Docker编排配置
   └── Makefile         # 项目管理命令
   ```

2. Python环境：

   - 版本要求：Python 3.8+

   - 虚拟环境：必须使用virtualenv或venv

   - 包管理：使用pip，必须固定依赖版本

   - 必须配置pip国内源：

     ```ini
     # pip配置文件：~/.pip/pip.conf (Linux/Mac) 或 %APPDATA%\pip\pip.ini (Windows)
     [global]
     index-url = https://pypi.tuna.tsinghua.edu.cn/simple
     trusted-host = pypi.tuna.tsinghua.edu.cn
     ```

   - requirements.txt格式：

     ```
     包名==版本号  # 用途说明
     ```

3. Node.js环境：

   - 版本要求：Node.js 16+

   - 包管理器：npm 或 yarn

   - 必须配置npm国内源：

     ```bash
     # 使用npm配置
     npm config set registry https://registry.npmmirror.com
     
     # 或使用yarn配置
     yarn config set registry https://registry.npmmirror.com
     ```

   - package.json版本锁定：

     - 必须包含 package-lock.json 或 yarn.lock
     - 依赖版本必须固定

4. 数据库环境：

   - 开发环境：SQLite3
   - 生产环境：PostgreSQL/MySQL
   - 版本控制：
     - 所有数据库变更必须通过migration
     - 禁止直接修改生产数据库
   - 数据备份：
     - 生产环境每日备份
     - 重要操作前必须备份

5. 代码质量控制：

   - 代码检查：
     - pylint：代码风格检查
     - flake8：语法错误检查
     - mypy：类型检查
   - 测试覆盖率：
     - 单元测试覆盖率 > 80%
     - 核心功能覆盖率 > 90%
   - 性能基准：
     - 页面加载时间 < 2s
     - 数据库查询时间 < 100ms

## AI基础行为准则

1. 代码生成规则：
   - 必须先分析项目现有代码结构和风格
   - 生成代码必须遵循项目已有的编码风格
   - 禁止生成未经验证的实验性代码
   - 每次执行命令，必须使用绝对路径，或者确定当前在那个目录下
2. 文档处理规则：
   - 禁止删除任何现有文档内容
   - 文档更新必须保留历史版本信息
   - 必须在文档修改处标注更新时间和原因
   - 文档结构必须保持一致性
3. 代码审查规则：
   - 必须对生成的每一段代码进行自审
   - 检查代码是否符合项目安全标准
   - 验证代码的性能影响
   - 确保代码可维护性

## AI开发流程规范

1. 需求分析阶段：
   - 必须完整理解用户需求再开始编码
   - 必须确认需求的可行性和依赖关系
   - 禁止在需求不明确时进行开发
   - 必须验证需求与现有功能的兼容性

2. 代码实现阶段：
   - 必须先检查是否存在可复用代码
   - 必须遵循项目的设计模式
   - 必须处理所有异常情况
   - 必须添加必要的日志记录

3. 测试验证阶段：
   - 必须生成对应的测试用例
   - 必须覆盖边界条件测试
   - 必须验证错误处理逻辑
   - 必须确保向后兼容性

## AI代码质量控制

1. 代码生成质量要求：
   - 禁止生成重复代码
   - 禁止使用废弃的API或特性
   - 禁止忽略编译器警告
   - 禁止生成未经优化的查询语句

2. 性能优化要求：
   - 必须使用最优的数据结构
   - 必须优化数据库查询
   - 必须考虑并发性能
   - 必须避免内存泄漏

3. 安全规范要求：
   - 必须进行输入验证
   - 必须防止SQL注入
   - 必须防止XSS攻击
   - 必须使用安全的加密方法

## AI错误处理规范

1. 异常处理规则：
   - 必须捕获所有可能的异常
   - 必须提供详细的错误信息
   - 必须记录错误堆栈
   - 必须实现错误恢复机制

2. 调试规则：
   - 必须提供清晰的调试信息
   - 必须标注代码关键点
   - 必须记录重要变量状态
   - 必须追踪错误根源

## AI版本控制规范

1. 代码提交规则：
   - 必须提供清晰的提交信息
   - 必须确保提交粒度适中
   - 必须包含相关任务ID
   - 禁止提交未测试的代码

2. 分支管理规则：
   - 必须遵循项目分支策略
   - 必须及时合并最新代码
   - 必须解决所有冲突
   - 禁止直接提交到主分支

## AI数据库操作规范

1. 数据库变更规则：
   - 禁止直接修改数据库结构
   - 必须使用迁移文件
   - 必须备份重要数据
   - 必须验证数据一致性

2. 查询优化规则：
   - 必须使用索引优化
   - 必须避免N+1查询
   - 必须限制查询结果集
   - 必须优化JOIN操作

## AI接口开发规范

1. API设计规则：
   - 必须遵循RESTful规范
   - 必须版本化管理
   - 必须提供错误码说明
   - 必须处理超时情况

2. 接口安全规则：
   - 必须验证所有输入
   - 必须限制访问频率
   - 必须使用HTTPS
   - 必须实现认证机制

## AI代码重构规范

1. 重构触发规则：
   - 发现代码重复时必须重构
   - 发现性能问题时必须重构
   - 发现安全漏洞时必须重构
   - 发现可维护性问题时必须重构

2. 重构执行规则：
   - 必须保持功能不变
   - 必须编写迁移方案
   - 必须进行完整测试
   - 必须分步骤执行

## AI文档生成规范

1. 注释生成规则：
   - 必须注释复杂逻辑
   - 必须说明参数含义
   - 必须标注返回值
   - 必须解释异常情况

2. 文档更新规则：
   - 必须同步更新文档
   - 必须标注修改历史
   - 必须保持格式统一
   - 必须确保内容准确

## AI上下文管理规范

1. 开发状态记录规则：
   - 必须在每次会话结束时记录当前开发状态
   - 必须记录未完成的任务和下一步计划
   - 必须保存重要的上下文信息
   - 必须记录关键决策和原因

2. 会话连续性规则：
   - 必须在每次会话开始时回顾历史记录
   - 必须验证上次会话的完成状态
   - 必须确认当前任务的优先级
   - 必须同步最新的项目状态
   - 每次对话有新的需求需要更新需求文档

## AI文档维护规范

1. 文档编码和字符规范：

   - 文件编码：
     - 必须使用 UTF-8 编码，不带 BOM
     - 禁止使用其他编码格式
     - 禁止混合使用不同编码

   - 字符要求：
     - 仅允许使用标准中文字符和英文字符
     - 禁止使用特殊字符（除标准 Markdown 语法外）
     - 禁止出现乱码字符
     - 中文标点必须使用全角字符
     - 英文标点必须使用半角字符
     - 数字必须使用半角字符

   - 格式检查：
     - 生成文档后必须检查是否存在乱码
     - 发现乱码必须立即修正
     - 必须确保文档在不同平台下显示一致

2. 文档命名强制规定：

   - 项目进度文档：必须且只能命名为 `docs/项目进度.md`
   - 开发日志文档：必须且只能命名为 `docs/开发日志.md`
   - 需求变更文档：必须且只能命名为 `docs/需求变更.md`
   - 系统设计文档：必须且只能命名为 `docs/系统设计.md`
   - 接口文档：必须且只能命名为 `docs/接口文档.md`
   - 部署文档：必须且只能命名为 `docs/部署文档.md`
   - 测试文档：必须且只能命名为 `docs/测试文档.md`
   - **严禁**：
     - 禁止创建功能重复的文档
     - 禁止使用其他命名方式
     - 禁止在其他位置创建文档
     - 如需新增文档类型，必须先更新本规范

3. 核心文档管理：

   - 必须维护项目进度文档 (docs/项目进度.md)：

     - 文档开头必须包含以下警示信息：

       ```markdown
       > ⚠️ **重要提示**：
       > 1. 本任务列表仅允许：
       >    - 增加新的任务条目
       >    - 更新任务状态
       >    - 调整任务顺序
       > 2. **严禁**删除已有任务节点，除非：
       >    - 存在重复任务需要合并
       >    - 任务确认废弃且获得项目负责人批准
       > 3. 任何任务节点的删除都需要：
       >    - 记录删除原因
       >    - 保留历史记录
       >    - 项目负责人审批
       > 4. 废弃的任务使用删除线标记 ~~任务内容~~，并保留在列表中
       ```

     - 任务状态必须使用统一的标记：

       - [✅] 已完成：任务已经完成并通过验收
       - [🏗️] 进行中：任务正在进行中
       - [⏳] 待开始：任务已规划但尚未开始
       - [❌] 已取消：任务已被取消
       - [⚠️] 已暂停：任务暂时停止
       - [↪️] 已转移：任务已合并或转移到其他任务中

     - 任务列表格式规范：

       ```markdown
       ## 项目任务列表
       
       ### 1. [模块名称]
       - [状态] 任务描述
         - 开始时间：YYYY-MM-DD
         - 预计完成：YYYY-MM-DD
         - 实际完成：YYYY-MM-DD
         - 负责人：XXX
         - 任务详情：
           - 具体要求
           - 相关依赖
           - 注意事项
       ```

     - 必须在项目开发前期制定完整的任务列表

     - 必须定期更新任务状态和进度

     - 必须记录任务变更的原因和审批信息

     - 必须保持任务列表的完整性和可追溯性

   - 必须维护开发日志 (docs/开发日志.md)：

     - 记录每日开发内容
     - 记录代码变更说明
     - 记录问题和解决过程
     - 记录重要的讨论结果

   - 必须维护需求变更文档 (docs/需求变更.md)：

     - 记录需求变更的原因
     - 记录变更的具体内容
     - 记录变更的影响范围
     - 记录变更的实施计划

4. 文档更新触发规则：

   - 收到新需求时必须更新需求文档
   - 完成开发任务时必须更新进度文档
   - 发生技术决策时必须记录决策文档
   - 遇到问题时必须更新问题日志

5. 文档内容规范：

   - 必须包含时间戳和版本信息
   - 必须明确记录参与人员
   - 必须保持文档结构统一
   - 必须使用统一的格式标记

6. 文档关联规则：

   - 必须建立文档间的引用关系
   - 必须保持文档间的一致性
   - 必须更新相关联的文档
   - 必须维护文档索引

## AI沟通反馈规范

1. 问题澄清规则：
   - 必须主动询问不明确的需求
   - 必须确认理解是否正确
   - 必须记录所有澄清内容
   - 必须更新相关文档

2. 进度报告规则：
   - 必须定期汇报开发进度
   - 必须说明遇到的困难
   - 必须提供解决方案建议
   - 必须记录重要的反馈

3. 变更确认规则：
   - 必须确认每个变更的必要性
   - 必须评估变更的影响
   - 必须获得变更的确认
   - 必须记录变更的过程
   - 修改前必须仔细阅读修改文件所有内容和关联文件

## 变更记录

| 日期       | 版本   | 说明                         |
| ---------- | ------ | ---------------------------- |
| 2024-03-21 | v1.0.0 | 初始版本                     |
| 2024-03-21 | v1.1.0 | 添加文档维护和上下文管理规范 |

## AI Django开发规范

1. 后端项目结构规范：

   ```
   backend/
   ├── requirements/       # 依赖管理
   │   ├── base.txt       # 基础依赖
   │   ├── dev.txt        # 开发环境依赖
   │   └── prod.txt       # 生产环境依赖
   ├── src/               # 源代码目录
   │   ├── manage.py      # Django管理脚本
   │   ├── config/        # 项目配置目录
   │   │   ├── settings/  # 配置文件目录
   │   │   │   ├── base.py    # 基础配置
   │   │   │   ├── dev.py     # 开发环境配置
   │   │   │   └── prod.py    # 生产环境配置
   │   │   ├── urls.py    # URL配置
   │   │   └── wsgi.py    # WSGI配置
   │   ├── apps/          # 应用目录
   │   │   ├── core/      # 核心应用
   │   │   │   ├── __init__.py
   │   │   │   ├── apps.py
   │   │   │   ├── urls.py
   │   │   │   ├── models/
   │   │   │   ├── views/
   │   │   │   ├── services/  # 业务逻辑层
   │   │   │   └── tests/
   │   │   ├── users/     # 用户管理
   │   │   └── api/       # API接口
   │   ├── libs/          # 公共库
   │   │   ├── middlewares/
   │   │   ├── decorators/
   │   │   └── utils/
   │   ├── static/        # 静态文件
   │   ├── media/         # 上传文件
   │   └── templates/     # 模板文件
   ├── tests/             # 测试目录
   │   ├── conftest.py
   │   ├── factories/
   │   └── integration/
   ├── scripts/           # 管理脚本
   │   ├── backup_db.sh
   │   └── load_fixtures.py
   └── .env              # 环境变量
   ```

2. 应用结构规范：

   ```
   应用目录/
   ├── migrations/            # 数据库迁移文件
   ├── templates/            # 应用模板
   │   └── 应用名/
   ├── static/               # 应用静态文件
   │   └── 应用名/
   ├── api/                  # API相关
   │   ├── serializers.py
   │   ├── urls.py
   │   └── views.py
   ├── models/              # 模型文件
   │   ├── __init__.py
   │   ├── base.py         # 基础模型
   │   └── mixins.py       # 模型混入
   ├── views/              # 视图文件
   │   ├── __init__.py
   │   └── mixins.py
   ├── forms.py            # 表单
   ├── urls.py             # URL配置
   ├── apps.py             # 应用配置
   ├── admin.py            # 管理界面配置
   └── tests.py            # 测试文件
   ```

3. 代码组织规范：

   - 模型定义规则：
     - 必须继承自 `django.db.models.Model`
     - 必须定义 `class Meta`
     - 必须实现 `__str__` 方法
     - 必须添加字段注释

   - 视图组织规则：
     - 使用基于类的视图（CBV）
     - 视图必须继承基础视图类
     - 必须实现权限控制
     - 必须处理异常情况

   - API接口规则：
     - 必须使用 Django REST framework
     - 必须版本化管理
     - 必须实现认证和权限
     - 必须规范化响应格式

4. 数据库规范：

   - 模型设计规则：
     - 必须包含创建和更新时间字段
     - 必须定义合适的字段类型
     - 必须设置适当的约束
     - 必须考虑索引优化

   - 查询优化规则：
     - 必须使用 `select_related` 和 `prefetch_related`
     - 必须避免 N+1 查询问题
     - 必须使用数据库事务
     - 必须处理并发问题

   - 模型变更管理：
     - **变更审批流程**：
       - 所有模型变更必须经过技术评审
       - 涉及核心业务的变更需产品经理确认
       - 变更必须有明确的回滚方案
     - **禁止行为**：
       - 禁止删除或修改已有字段
       - 禁止修改字段类型
       - 禁止修改主键定义
       - 禁止在高峰期执行migration
     - **允许操作**：
       - 添加新的可空字段
       - 添加新的数据表
       - 添加新的索引(需评估性能影响)
     - **变更执行流程**：
       1. 提交变更申请(说明原因和影响)
       2. 技术评审通过
       3. 在测试环境验证
       4. 制定变更计划和回滚方案
       5. 在低峰期执行变更
       6. 变更后进行功能验证
     - **数据迁移要求**：
       - 大量数据迁移必须分批执行
       - 迁移前后数据一致性校验
       - 保留迁移日志和审计记录

5. 安全规范：

   - 认证规则：
     - 必须使用 Django 内置认证系统
     - 必须实现密码加密存储
     - 必须启用会话保护
     - 必须实现登录限制

   - 权限控制：
     - 必须实现基于角色的访问控制
     - 必须控制模型级别权限
     - 必须控制视图级别权限
     - 必须控制API访问权限

6. 缓存策略：

   - 缓存配置：
     - 必须使用 Redis 作为缓存后端
     - 必须设置合理的缓存时间
     - 必须实现缓存更新机制
     - 必须处理缓存失效

   - 缓存使用：
     - 必须缓存静态内容
     - 必须缓存查询结果
     - 必须缓存会话数据
     - 必须实现缓存预热

7. 异步任务处理：

   - Celery配置：
     - 必须使用 Celery 处理异步任务
     - 必须配置任务重试机制
     - 必须设置任务超时时间
     - 必须实现任务监控

   - 任务规范：
     - 必须异步处理耗时操作
     - 必须处理任务失败情况
     - 必须记录任务执行日志
     - 必须设置任务优先级

8. 测试规范：

   - 测试用例：
     - 必须编写单元测试
     - 必须编写集成测试
     - 必须测试异常情况
     - 必须测试边界条件

   - 测试覆盖：
     - 模型测试覆盖率 > 90%
     - 视图测试覆盖率 > 80%
     - API测试覆盖率 > 85%
     - 表单测试覆盖率 > 85%

9. 开发环境规范：

   - **Python环境**：

     - 版本要求：Python 3.8+

     - 虚拟环境：必须使用virtualenv或venv

     - 包管理：使用pip，必须固定依赖版本

     - 必须配置pip国内源：

       ```ini
       # pip配置文件：~/.pip/pip.conf (Linux/Mac) 或 %APPDATA%\pip\pip.ini (Windows)
       [global]
       index-url = https://pypi.tuna.tsinghua.edu.cn/simple
       trusted-host = pypi.tuna.tsinghua.edu.cn
       ```

     - requirements.txt格式：

       ```
       包名==版本号  # 用途说明
       ```

   - **数据库规范**：

     - 开发环境：SQLite3
     - 生产环境：PostgreSQL/MySQL
     - 版本控制：
       - 所有数据库变更必须通过migration
       - 禁止直接修改生产数据库
     - 数据备份：
       - 生产环境每日备份
       - 重要操作前必须备份

   - **代码质量控制**：

     - 代码检查：
       - pylint：代码风格检查
       - flake8：语法错误检查
       - mypy：类型检查
     - 测试覆盖率：
       - 单元测试覆盖率 > 80%
       - 核心功能覆盖率 > 90%
     - 性能基准：
       - 页面加载时间 < 2s
       - 数据库查询时间 < 100ms

## AI前端开发规范

1. Vue项目结构规范：

   ```
   frontend/
   ├── public/                # 静态资源
   │   ├── index.html        # 主HTML文件
   │   └── favicon.ico       # 网站图标
   ├── src/
   │   ├── api/              # API接口定义
   │   │   ├── index.js      # API导出
   │   │   └── modules/      # 按模块划分API
   │   ├── assets/           # 项目资源
   │   │   ├── images/       # 图片资源
   │   │   └── styles/       # 样式文件
   │   ├── components/       # 公共组件
   │   │   ├── common/       # 通用组件
   │   │   └── layout/       # 布局组件
   │   ├── router/           # 路由配置
   │   │   └── index.js      # 路由定义
   │   ├── store/            # Vuex状态管理
   │   │   ├── index.js      # Store配置
   │   │   └── modules/      # 状态模块
   │   ├── utils/            # 工具函数
   │   │   ├── request.js    # axios封装
   │   │   └── auth.js       # 认证相关
   │   ├── views/            # 页面组件
   │   ├── App.vue           # 根组件
   │   └── main.js           # 入口文件
   ├── tests/                # 测试文件
   └── package.json          # 项目配置
   ```

2. React项目结构规范：

   ```
   frontend/
   ├── public/               # 静态资源
   ├── src/
   │   ├── api/             # API接口定义
   │   ├── assets/          # 项目资源
   │   ├── components/      # 公共组件
   │   ├── hooks/           # 自定义Hooks
   │   ├── pages/           # 页面组件
   │   ├── store/           # Redux状态管理
   │   ├── utils/           # 工具函数
   │   ├── App.tsx          # 根组件
   │   └── index.tsx        # 入口文件
   ├── tests/               # 测试文件
   └── package.json         # 项目配置
   ```

3. 组件开发规范：

   - 组件命名规则：
     - 必须使用PascalCase命名组件
     - 必须使用功能描述性的名称
     - 必须避免使用缩写
     - 必须保持命名一致性

   - 组件结构规则：
     - 必须遵循单一职责原则
     - 必须将复杂组件拆分为小组件
     - 必须使用组件生命周期钩子
     - 必须处理组件错误边界

4. 状态管理规范：

   - Vuex/Redux使用规则：
     - 必须模块化管理状态
     - 必须使用标准的状态更新方式
     - 必须处理异步操作
     - 必须做好状态持久化

   - 状态设计规则：
     - 必须避免冗余状态
     - 必须合理设计状态结构
     - 必须考虑状态重置
     - 必须优化状态访问性能

5. 路由管理规范：

   - 路由配置规则：
     - 必须使用懒加载
     - 必须实现路由守卫
     - 必须处理404页面
     - 必须进行权限控制

   - 路由参数规则：
     - 必须验证路由参数
     - 必须处理参数丢失
     - 必须使用命名路由
     - 必须规范化URL结构

6. API调用规范：

   - 请求封装规则：
     - 必须统一封装axios
     - 必须处理请求拦截
     - 必须处理响应拦截
     - 必须统一处理错误

   - 数据处理规则：
     - 必须处理数据转换
     - 必须验证响应数据
     - 必须处理加载状态
     - 必须实现请求缓存

7. 样式开发规范：

   - CSS组织规则：
     - 必须使用CSS预处理器
     - 必须模块化管理样式
     - 必须避免样式冲突
     - 必须实现响应式设计

   - 主题管理规则：
     - 必须使用变量管理主题
     - 必须支持主题切换
     - 必须考虑暗黑模式
     - 必须保持样式一致性

8. 性能优化规范：

   - 加载优化规则：
     - 必须实现代码分割
     - 必须优化资源加载
     - 必须使用CDN加速
     - 必须启用Gzip压缩

   - 渲染优化规则：
     - 必须避免不必要的渲染
     - 必须使用虚拟列表
     - 必须优化大数据渲染
     - 必须做好缓存处理

9. 测试规范：

   - 单元测试规则：
     - 必须测试组件渲染
     - 必须测试用户交互
     - 必须测试状态变更
     - 必须测试异步操作

   - E2E测试规则：
     - 必须覆盖关键流程
     - 必须测试表单提交
     - 必须测试路由跳转
     - 必须测试权限控制

10. 构建部署规范：

    - 构建配置规则：
      - 必须区分环境配置
      - 必须优化构建性能
      - 必须分析构建产物
      - 必须处理兼容性

    - 部署流程规则：
      - 必须使用CI/CD
      - 必须进行构建检查
      - 必须自动化部署
      - 必须版本化管理